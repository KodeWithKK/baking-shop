// This is your Prisma schema file,

// learn more about prisma with mongodb
// https://www.codifytools.com/blog/auth-prisma-mongo-nextjs
// https://chukwudinweze.hashnode.dev/prisma-orm-with-mongodb-in-nextjs-clokoexr3000c09l6dmvv0lm0

// run: npx prisma generate
// push: npx prisma db push
// studio: npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole  @default(USER)
  isTwoFactorEnabled      Boolean   @default(false)
  twoFactorConfirmationId String?   @db.ObjectId
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  location                String?

  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  Review                Review[]
  CartItem              CartItem[]
  WishlistItem          WishlistItem[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum CakeCategory {
  BEST_SELLER
  DESIGNER_CAKES
  PASTRIES
}

model Cake {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  imgSrc          String
  description     String
  category        CakeCategory
  listPrice       Int
  discountedPrice Int?
  rating          Float        @default(0)
  totalReviews    Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  reviews      Review[]
  CartItem     CartItem[]
  WishlistItem WishlistItem[]
}

model CartItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  cakeId     String @db.ObjectId
  quantity   Int    @default(1)
  cakeWeight Float?
  userId     String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  cake Cake @relation(fields: [cakeId], references: [id])
}

model WishlistItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  cakeId String @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  cake Cake @relation(fields: [cakeId], references: [id])
}

enum Occasion {
  BIRTHDAY
  ANNIVERSARY
  WEDDING
  GRADUATION
  VALENTINE
  CHRISTMAS
  NEW_YEAR
  OTHER
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  cakeId    String   @db.ObjectId
  rating    Int
  ocassion  Occasion @default(BIRTHDAY)
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cake Cake @relation(fields: [cakeId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
